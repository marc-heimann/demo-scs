--- # Source: host-adapter/templates/configmap.yaml apiVersion: v1 kind: ConfigMap metadata: name: host-adapter namespace: "production" labels: app: host-adapter chart: host-adapter-0.1.1-20200902140603.340 release: host-adapter heritage: Tiller data: appsettings.Production.json: |- { "AppConfig": { "PathBase": "/host-adapter" }, "AccessToken": { "TokenTimeToLiveOffset": 10 }, "Kafka": { "BootstrapServers": "kafka.production:9092", "GroupId": "host-adapter-consumer", "ClientId": "host-adapter", "EnableAutoCommit": false, "LogConnectionClose": "false" }, "Tracing": { "Enabled": "false", "JaegerHost": "jaeger-agent.monitoring-system", "JaegerPort": "6831" }, "ConnectionStrings": { "Oracle": " Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=vm-oracle-002)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=ORA19CDB))); Pooling=true;Min Pool Size=25;Max Pool Size=25;User ID=HOSTADAPTER;Password=HOSTADAPTER" }, "Logging": { "LogLevel": "Debug" }, "Host": { "BaseUri": "http://40.113.109.138/", "PutawayConfirmationRequestUri": "api/hostmock/putaway-confirmation", "FulfillmentConfirmationRequestUri": "api/hostmock/fulfillment-confirmation", "ShippingContainerConfirmationRequestUri": "api/hostmock/shipping-container-confirmation", "InventorySnapshotConfirmationRequestUri": "api/hostmock/inventory-snapshot-confirmation", "InventoryAdjustmentRequestUri": "api/hostmock/inventory-adjustment", "InventoryStatusChangeRequestUri": "api/hostmock/inventory-status-change" }, "SkuManager": { "BaseUri": "https://sku-manager.production/sku-manager/", "ProductsUri": "api/products" }, "GoodsSupplier": { "BaseUri": "https://goods-supplier.production/goods-supplier/", "InboundOrdersRequestUri": "api/inbound-orders", "StockLotRequestUri": "api/stock-lots" }, "ConsignmentPlanner": { "BaseUri": "https://consignment-planner.production/consignment-planner/", "OutboundOrdersRequestUri": "api/outbound-orders", "PackagesRequestUri": "api/packages", "Version": "1" }, "InventoryTracker": { "BaseUri": "https://inventory-tracker.production/inventory-tracker/", "InventoryLevelRequestUri": "api/inventory-level", "Limit": "20" }, "Walmart": { "MappingTableId": "70551185-d93c-449f-9099-d4d0f43e3e3e", "MappingTables": [ { "MappingTableId": "70551185-d93c-449f-9099-d4d0f43e3e3e", "Entries": [ { "SequenceNumber": 1, "DepartmentNumbers": [ 1, 21, 41, 61, 81 ] }, { "SequenceNumber": 2, "DepartmentNumbers": [ 2, 22, 42, 62, 82 ] }, { "SequenceNumber": 3, "DepartmentNumbers": [ 3, 23, 43, 63, 83 ] }, { "SequenceNumber": 4, "DepartmentNumbers": [ 4, 24, 44, 64, 84 ] }, { "SequenceNumber": 5, "DepartmentNumbers": [ 5, 25, 45, 65, 85 ] }, { "SequenceNumber": 6, "DepartmentNumbers": [ 6, 26, 46, 66, 86 ] }, { "SequenceNumber": 7, "DepartmentNumbers": [ 7, 27, 47, 67, 87 ] }, { "SequenceNumber": 8, "DepartmentNumbers": [ 8, 28, 48, 68, 88 ] }, { "SequenceNumber": 9, "DepartmentNumbers": [ 9, 29, 49, 69, 89 ] }, { "SequenceNumber": 10, "DepartmentNumbers": [ 10, 30, 50, 60, 80 ] }, { "SequenceNumber": 11, "DepartmentNumbers": [ 11, 31, 51, 71, 91 ] }, { "SequenceNumber": 12, "DepartmentNumbers": [ 12, 32, 52, 72, 92 ] }, { "SequenceNumber": 13, "DepartmentNumbers": [ 13, 33, 53, 73, 93 ] }, { "SequenceNumber": 14, "DepartmentNumbers": [ 14, 34, 54, 74, 94 ] }, { "SequenceNumber": 15, "DepartmentNumbers": [ 15, 35, 55, 75, 95 ] }, { "SequenceNumber": 16, "DepartmentNumbers": [ 16, 36, 56, 76, 96 ] }, { "SequenceNumber": 17, "DepartmentNumbers": [ 17, 37, 57, 77, 97 ] }, { "SequenceNumber": 18, "DepartmentNumbers": [ 18, 38, 58, 78, 98 ] }, { "SequenceNumber": 19, "DepartmentNumbers": [ 19, 39, 59, 79, 99 ] }, { "SequenceNumber": 20, "DepartmentNumbers": [ 20, 40, 60, 80, 100 ] } ] } ], "OutboundDelay": "4000", "Period": "3000", "InventoryReasonsOfInterest": [ { "Reason": "Packed", "ReasonText": "PACKED", "ReasonCode": 0 } ] }, "EventStatusConfiguration": [ { "EventName": "InboundOrderStarted", "Status": "STARTED" }, { "ReasonCode": "Success", "EventName": "InboundOrderCompleted", "Status": "COMPLETED" }, { "ReasonCode": "ItemDifference", "Condition": "EqualToZero", "EventName": "InboundOrderCompleted", "Status": "CANCELED" }, { "ReasonCode": "ItemDamaged", "EventName": "InboundOrderCompleted", "Status": "COMPLETED_ERROR", "ErrorCode": 1, "ErrorDesc": "Shortage of {value} items" }, { "ReasonCode": "WrongItem", "EventName": "InboundOrderCompleted", "Status": "COMPLETED_ERROR", "ErrorCode": 2, "ErrorDesc": "Shortage of {value} items" }, { "ReasonCode": "ItemDifference", "Condition": "DifferenceNegative", "EventName": "InboundOrderCompleted", "Status": "COMPLETED_SHORT", "ErrorCode": 3, "ErrorDesc": "Shortage of {value} items" }, { "ReasonCode": "ItemDifference", "Condition": "DifferencePositive", "EventName": "InboundOrderCompleted", "Status": "COMPLETED_OVER", "ErrorCode": 4, "ErrorDesc": "Surplus of {value} items" }, { "ReasonCode": "Started", "EventName": "OutboundOrderStarted", "Status": "COMMITTED" }, { "ReasonCode": "Canceled", "EventName": "OutboundOrderCanceled", "Status": "CANCELED" }, { "ReasonCode": "Completed", "Condition": "EqualToZero", "EventName": "OutboundOrderCompleted", "Status": "COMPLETED" }, { "ReasonCode": "Completed", "Condition": "NotEqualToZero", "EventName": "OutboundOrderCompleted", "Status": "COMPLETED_ERROR", "ErrorCode": 1, "ErrorDesc": "There was an error in one or more fullfilment units." }, { "ReasonCode": "Unexpected value", "Status": "COMPLETED_ERROR", "ErrorCode": 99, "ErrorDesc": "Unknown error.", "EventName": "Any" } ] } --- # Source: host-adapter/templates/service.yaml apiVersion: v1 kind: Service metadata: name: host-adapter namespace: "production" labels: app: host-adapter chart: host-adapter-0.1.1-20200902140603.340 release: host-adapter heritage: Tiller spec: type: ClusterIP ports: - port: 443 targetPort: https protocol: TCP name: https selector: app: host-adapter release: host-adapter --- # Source: host-adapter/templates/deployment.yaml apiVersion: apps/v1 kind: Deployment metadata: name: host-adapter namespace: "production" labels: app: host-adapter chart: host-adapter-0.1.1-20200902140603.340 release: host-adapter heritage: Tiller annotations: checksum/config: ef3d88f65902de019ef38f5465142c9016dcd359ca628a3ecbdf9533385642af spec: replicas: 1 selector: matchLabels: app: host-adapter release: host-adapter template: metadata: labels: app: host-adapter release: host-adapter spec: initContainers: - name: import-cert image: frapsoft/openssl imagePullPolicy: IfNotPresent command: - sh - -c - | export RANDFILE=/tmp/.rnd # Create keystore passwords openssl rand -base64 32 > /etc/x509/password/keystore openssl rand -base64 32 > /etc/x509/password/truststore chown 1000 /etc/x509/password/* chmod 0600 /etc/x509/password/* # Create pkcs12 keystore openssl pkcs12 -export -in /etc/x509/cert/tls.crt -inkey /etc/x509/cert/tls.key \ -out /etc/x509/keystore/keystore.pkcs12 -name server \ -CAfile /etc/x509/ca/ca.crt -caname root \ -password file:/etc/x509/password/keystore # Create pkcs12 truststore openssl pkcs12 -export -nokeys -in /etc/x509/ca/ca.crt \ -out /etc/x509/keystore/truststore.pkcs12 \ -password file:/etc/x509/password/truststore cp /etc/x509/ca/ca.crt /etc/x509/ca-certificates chown 1000 /etc/x509/keystore/* chmod 0600 /etc/x509/keystore/* volumeMounts: - name: password mountPath: "/etc/x509/password" - name: keystore mountPath: "/etc/x509/keystore" - name: cert mountPath: "/etc/x509/cert" - name: ca mountPath: "/etc/x509/ca" - name: ca-prep mountPath: "/etc/x509/ca-certificates" imagePullSecrets: - name: vi-central-docker-registry containers: - name: host-adapter image: "vicentral.azurecr.io/vanderlande/wpp/fm_walhad/host-adapter:0.0.1-20200403090606.242" imagePullPolicy: IfNotPresent command: - sh - -c - update-ca-certificates; cd /app; dotnet HostAdapterService.Web.dll; env: volumeMounts: - name: configuration mountPath: "/etc/microservice/configuration" - name: keycloak mountPath: "/etc/keycloak" - name: keycloak-frontend mountPath: "/etc/keycloak-frontend" - name: password mountPath: "/etc/x509/password" - name: keystore mountPath: "/etc/x509/keystore" - name: ca-prep mountPath: "/usr/local/share/ca-certificates" ports: - name: https containerPort: 5001 protocol: TCP livenessProbe: httpGet: scheme: HTTPS path: management/health port: https initialDelaySeconds: 120 timeoutSeconds: 60 readinessProbe: httpGet: scheme: HTTPS path: management/health port: https initialDelaySeconds: 60 timeoutSeconds: 60 resources: limits: cpu: 200m memory: 512Mi requests: cpu: 100m memory: 256Mi volumes: - name: configuration configMap: name: host-adapter - name: keycloak secret: secretName: host-adapter-keycloak - name: keycloak-frontend secret: secretName: host-adapter-frontend-keycloak - name: cert secret: secretName: host-adapter-cert - name: ca secret: secretName: ca-cert - name: ca-prep emptyDir: {} - name: password emptyDir: {} - name: keystore emptyDir: {} --- # Source: host-adapter/templates/ingress.yaml apiVersion: extensions/v1beta1 kind: Ingress metadata: name: host-adapter namespace: "production" labels: app: host-adapter chart: host-adapter-0.1.1-20200902140603.340 release: host-adapter heritage: Tiller annotations: kubernetes.io/ingress.class: nginx nginx.ingress.kubernetes.io/backend-protocol: "HTTPS" nginx.ingress.kubernetes.io/proxy-buffer-size: "16k" spec: rules: - host: cicd-dev-001-sci-003.westeurope.cloudapp.azure.com http: paths: - path: /host-adapter/walmart backend: serviceName: host-adapter servicePort: https --- # Source: host-adapter/templates/certificate.yaml apiVersion: certmanager.k8s.io/v1alpha1 kind: Certificate metadata: name: host-adapter namespace: "production" labels: app: host-adapter chart: host-adapter-0.1.1-20200902140603.340 release: host-adapter heritage: Tiller spec: secretName: host-adapter-cert issuerRef: name: ca kind: ClusterIssuer commonName: host-adapter dnsNames: - host-adapter - host-adapter.production - host-adapter.production.svc.cluster.local
